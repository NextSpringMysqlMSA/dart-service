spring:
  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false # 프로덕션 환경에서는 SQL 로깅 비활성화
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false

  # Datasource 설정 (EKS 환경 - RDS용)
  datasource:
    url: ${DB_URL:jdbc:mysql://your-rds-endpoint:3306/your-db-name} # Secret에서 제공될 값
    username: ${DB_USER:admin} # Secret에서 제공될 값
    password: ${DB_PASS:password} # Secret에서 제공될 값
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 30000 # 예시: 30초
      maximum-pool-size: 10     # 예시: 최대 풀 크기 10
      idle-timeout: 600000      # 예시: 10분
      max-lifetime: 1800000     # 예시: 30분

  # EKS 환경용 Kafka 설정
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092} # EKS 환경의 Kafka 주소
    consumer:
      group-id: dart-api-group
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      auto-startup: true # EKS에서는 리스너 자동 시작

  # 라이프사이클 설정
  lifecycle:
    timeout-per-shutdown-phase: 30s # 각 단계별 종료 타임아웃 (기본 30초)

# 서버 설정
server:
  port: ${PORT:8080} # EKS 환경에서는 8080 포트 사용
  servlet:
    context-path: /api/v1
  shutdown: graceful # graceful shutdown 활성화

# EKS 환경용 Eureka 설정
eureka:
  client:
    enabled: true # EKS에서는 Eureka 클라이언트 활성화
    service-url:
      defaultZone: ${EUREKA_SERVICE_URL:http://discovery-service:8761/eureka/} # EKS 환경의 Eureka 주소
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true # IP 주소 사용 선호 (Kubernetes 환경에서 권장)
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    lease-renewal-interval-in-seconds: 10 # 기본값 30. 더 자주 갱신하여 빠른 감지
    lease-expiration-duration-in-seconds: 30 # 기본값 90. 더 빨리 만료시켜 불필요한 인스턴스 제거

# 로깅 설정 (EKS 환경용)
logging:
  level:
    root: INFO
    com.example.javaversion: INFO # 프로덕션 환경에서는 DEBUG 대신 INFO 사용
    org.hibernate.SQL: INFO # 프로덕션 환경에서는 SQL 로깅 최소화
    org.springframework.web: INFO

# Actuator 설정 (EKS 환경용)
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: when-authorized # 프로덕션 환경에서는 인증된 사용자에게만 상세 정보 표시
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring WebFlux (for WebClient)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // H2 Database (for development)
    runtimeOnly 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Swagger (Springdoc OpenAPI)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    // Jackson (for XML and JSON processing)
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Caffeine Cache
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Zip (for DART corp code)
    implementation 'net.lingala.zip4j:zip4j:2.11.5'
    
    // Resilience4j (RateLimiter 등)
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-ratelimiter:2.2.0'

    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    
    // 문서화 (OpenAPI/Swagger)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    
    // 보안
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // 로깅
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // 유틸리티
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // 캐싱
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    
    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // Lombok for Test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('bootJar') {
    archiveFileName = "dart-api-service.jar"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
    }
    sourceDirectories.setFrom(files("src/main/java"))
    classDirectories.setFrom(files(sourceSets.main.output.classesDirs.collect {
        fileTree(dir: it, exclude: [
            "**/dto/**",
            "**/entity/**",
            "**/config/**",
            "**/*Application*",
            "**/common/**"
        ])
    }))
}

// 애플리케이션 실행 시 항상 dev 프로파일을 기본으로 사용하도록 설정
bootRun {
    args = ['--spring.profiles.active=dev']
}
